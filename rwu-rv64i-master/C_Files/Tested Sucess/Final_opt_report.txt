/* opt_workload.c
 *
 * Freestanding optimization-workload test for RWU-RV64I.
 * - Uses rwu-rv64i.h for GPIO writes and rwu_store64 for DMEM inspection.
 * - Emits labeled GPIO markers so the TB can check that each section ran:
 *   SEQ: START (0xE0), FUNCS (0xE1), LOOP (0xE2), SWITCH (0xE3), MEM (0xE4),
 *        FINAL_RESULT (0xE5), END (0x0A)
 *
 * Purpose:
 * - Provide different code patterns that typically change across -O levels:
 *   * Many small functions (inlining)
 *   * Tight arithmetic loop (unrolling/strength reduction)
 *   * switch-based dispatch (branch vs jump-table)
 *   * simple memcpy loop (library vs inline)
 *
 * Notes:
 * - No division or 64-bit multiply to avoid libgcc helpers.
 * - No libc usage. Safe with -ffreestanding -nostdlib.
 * - No delays — writes are immediate; TB should sample writes when they occur.
 */

#include "rwu-rv64i.h"
#include <stdint.h>

/* alias for GPIO write */
static inline void gout(uint8_t v) { rwu_print(v); }

/* ------- small functions (candidates for inlining) ------- */
static uint32_t f_add(uint32_t a, uint32_t b) { return a + b; }
static uint32_t f_xor(uint32_t a, uint32_t b) { return a ^ b; }
static uint32_t f_rotl(uint32_t x, uint32_t r) { return (x << r) | (x >> (32 - r)); }
static uint32_t f_mix(uint32_t x, uint32_t y) {
    /* combine a few ops that may be optimized differently */
    uint32_t t = f_add(x, y);
    t = f_xor(t, (x << 3));
    t = f_rotl(t, 7);
    return t;
}

/* run many small calls to exercise inlining decisions */
static uint32_t run_funcs(uint32_t seed, int rounds) {
    uint32_t acc = seed;
    for (int i = 0; i < rounds; ++i) {
        acc = f_mix(acc, (uint32_t)i);
    }
    return acc;
}

/* ------- loop-heavy workload (candidates for unrolling/strength-reduction) ------- */
static uint32_t loop_heavy(uint32_t n) {
    uint32_t s = 0;
    /* simple loop — optimization can unroll, vectorize, or apply strength reduction */
    for (uint32_t i = 1; i <= n; ++i) {
        /* use small constant mul by addition to avoid 64-bit mul helpers */
        uint32_t mul3 = (i + i + i); /* equivalent to i*3 but avoids explicit multiply on some compilers */
        s += (mul3 ^ (i << 2)) + ((i & 0xF) << 5);
    }
    return s;
}

/* ------- switch/table workload (branch vs jump-table) ------- */
static uint32_t switch_case(uint32_t x) {
    /* 16-case switch; compilers may generate branch chain or jump table depending on optimization */
    switch (x & 0xF) {
    case 0: return 0x1111u;
    case 1: return 0x2222u;
    case 2: return 0x3333u;
    case 3: return 0x4444u;
    case 4: return 0x5555u;
    case 5: return 0x6666u;
    case 6: return 0x7777u;
    case 7: return 0x8888u;
    case 8: return 0x9999u;
    case 9: return 0xAAAAu;
    case 10: return 0xBBBBu;
    case 11: return 0xCCCCu;
    case 12: return 0xDDDDu;
    case 13: return 0xEEEEu;
    case 14: return 0xFFFFu;
    default: return 0x0000u;
    }
}

/* run the switch many times to create nontrivial code */
static uint32_t run_switch(uint32_t seed, int rounds) {
    uint32_t acc = 0;
    for (int i = 0; i < rounds; ++i) {
        acc ^= switch_case(seed + (uint32_t)i);
    }
    return acc;
}

/* ------- small memcpy-like routine (should remain simple) ------- */
static void mini_memcpy(uint8_t *dst, const uint8_t *src, uint32_t n) {
    for (uint32_t i = 0; i < n; ++i) {
        dst[i] = src[i];
    }
}

/* ------- top-level main: emit GPIO markers, run sections, output results ------- */
int main(void) {
    rwu_dmem_reset();

    /* START marker */
    gout(0xE0);

    /* Section 1: many small functions */
    gout(0xE1);                    /* label for TB */
    uint32_t r1 = run_funcs(0x12345678u, 40); /* change rounds to tune code size */

    /* Section 2: loop heavy */
    gout(0xE2);
    uint32_t r2 = loop_heavy(200);  /* tune n to change workload size */

    /* Section 3: switch/jump-table */
    gout(0xE3);
    uint32_t r3 = run_switch(0x55AAu, 100);

    /* Section 4: memcpy-like (exercise data movement) */
    gout(0xE4);
    static uint8_t src[64];
    static uint8_t dst[64];
    /* initialize src (small, safe .bss) */
    for (uint32_t i = 0; i < sizeof(src); ++i) src[i] = (uint8_t)(i * 3 + 7);
    mini_memcpy(dst, src, sizeof(src));

    /* Combine results to produce final bytes to GPIO (deterministic) */
    uint8_t out1 = (uint8_t)( (r1 ^ r2) & 0xFF );
    uint8_t out2 = (uint8_t)( (r3 >> 8) & 0xFF );
    uint8_t out3 = (uint8_t)( (r3) & 0xFF );

    /* Write final result bytes (these are observable and reflect computed values) */
    gout(out1);  /* some mix of funcs & loop */
    gout(out2);  /* switch high byte */
    gout(out3);  /* switch low byte */

    /* Store a 64-bit marker in DMEM for offline verification */
    rwu_store64( ((uint64_t)r1 << 32) ^ r2 ^ r3 ^ 0xDEADBEEFULL );

    /* Final marker and hang */
    gout(0xE5);
    gout(0x0A); /* newline/end */

    while (1) {
    	gout(0xFF);
    }

    return 0;
}

The optimization test results of the above program shown as below

1. Flag --> O0

04:21:48 **** Build of configuration Default for project rwu-rv64i ****
make all 
Building APP='test' from SRC_C='./test.c'
[CC] test.c
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O0 -g -msmall-data-limit=0 -I. -c "test.c" -o "test.o"
[AS] crt0.s
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O0 -g -msmall-data-limit=0 -I. -c "crt0.s" -o "crt0.o"
[LD] test.elf
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -T linker.ld -Wl,-Map="test.map" -o "test.elf" test.o crt0.o
[CP] test.elf -> test.v
riscv64-unknown-elf-objcopy -O verilog --verilog-data-width 4 "test.elf" "test.v"
sed -i 's/ /\n/g' "test.v"
sed -i 's/\r//g'  "test.v"
sed -i '1d'       "test.v"
cp -f "test.v" "../sim/riscvtest.mem"
cp -f "test.v" "../sim/riscvtest_tb_test.mem"
[BIN] test.elf -> test.bin
riscv64-unknown-elf-objcopy -O binary "test.elf" "test.bin"
[DMP] test.elf -> test.lst
riscv64-unknown-elf-objdump -d -S "test.elf" > "test.lst"
[SZ] test.elf
riscv64-unknown-elf-size --format=berkeley "test.elf"
   text	   data	    bss	    dec	    hex	filename
   1920	      0	    136	   2056	    808	test.elf

04:21:48 Build Finished. 0 errors, 0 warnings. (took 686ms)

Simulation Output : Did not run (Failed)


2. Flag  --> O

04:22:52 **** Build of configuration Default for project rwu-rv64i ****
make all 
Building APP='test' from SRC_C='./test.c'
[CC] test.c
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O -g -msmall-data-limit=0 -I. -c "test.c" -o "test.o"
[AS] crt0.s
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O -g -msmall-data-limit=0 -I. -c "crt0.s" -o "crt0.o"
[LD] test.elf
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -T linker.ld -Wl,-Map="test.map" -o "test.elf" test.o crt0.o
[CP] test.elf -> test.v
riscv64-unknown-elf-objcopy -O verilog --verilog-data-width 4 "test.elf" "test.v"
sed -i 's/ /\n/g' "test.v"
sed -i 's/\r//g'  "test.v"
sed -i '1d'       "test.v"
cp -f "test.v" "../sim/riscvtest.mem"
cp -f "test.v" "../sim/riscvtest_tb_test.mem"
[BIN] test.elf -> test.bin
riscv64-unknown-elf-objcopy -O binary "test.elf" "test.bin"
[DMP] test.elf -> test.lst
riscv64-unknown-elf-objdump -d -S "test.elf" > "test.lst"
[SZ] test.elf
riscv64-unknown-elf-size --format=berkeley "test.elf"
   text	   data	    bss	    dec	    hex	filename
    712	      0	    136	    848	    350	test.elf

04:22:53 Build Finished. 0 errors, 0 warnings. (took 734ms)

Simulation Output : got output till E3 (Failed)(All test cases not passed)


3. Flag  --> O1

04:24:54 **** Build of configuration Default for project rwu-rv64i ****
make all 
Building APP='test' from SRC_C='./test.c'
[CC] test.c
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O -g -msmall-data-limit=0 -I. -c "test.c" -o "test.o"
[AS] crt0.s
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O -g -msmall-data-limit=0 -I. -c "crt0.s" -o "crt0.o"
[LD] test.elf
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -T linker.ld -Wl,-Map="test.map" -o "test.elf" test.o crt0.o
[CP] test.elf -> test.v
riscv64-unknown-elf-objcopy -O verilog --verilog-data-width 4 "test.elf" "test.v"
sed -i 's/ /\n/g' "test.v"
sed -i 's/\r//g'  "test.v"
sed -i '1d'       "test.v"
cp -f "test.v" "../sim/riscvtest.mem"
cp -f "test.v" "../sim/riscvtest_tb_test.mem"
[BIN] test.elf -> test.bin
riscv64-unknown-elf-objcopy -O binary "test.elf" "test.bin"
[DMP] test.elf -> test.lst
riscv64-unknown-elf-objdump -d -S "test.elf" > "test.lst"
[SZ] test.elf
riscv64-unknown-elf-size --format=berkeley "test.elf"
   text	   data	    bss	    dec	    hex	filename
    712	      0	    136	    848	    350	test.elf

04:24:55 Build Finished. 0 errors, 0 warnings. (took 734ms)

Simulation Output : got output till E3 (Failed)(All test cases not passed)


4. Flag  --> O2

04:26:44 **** Build of configuration Default for project rwu-rv64i ****
make all 
Building APP='test' from SRC_C='./test.c'
[CC] test.c
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O2 -g -msmall-data-limit=0 -I. -c "test.c" -o "test.o"
[AS] crt0.s
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O2 -g -msmall-data-limit=0 -I. -c "crt0.s" -o "crt0.o"
[LD] test.elf
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -T linker.ld -Wl,-Map="test.map" -o "test.elf" test.o crt0.o
[CP] test.elf -> test.v
riscv64-unknown-elf-objcopy -O verilog --verilog-data-width 4 "test.elf" "test.v"
sed -i 's/ /\n/g' "test.v"
sed -i 's/\r//g'  "test.v"
sed -i '1d'       "test.v"
cp -f "test.v" "../sim/riscvtest.mem"
cp -f "test.v" "../sim/riscvtest_tb_test.mem"
[BIN] test.elf -> test.bin
riscv64-unknown-elf-objcopy -O binary "test.elf" "test.bin"
[DMP] test.elf -> test.lst
riscv64-unknown-elf-objdump -d -S "test.elf" > "test.lst"
[SZ] test.elf
riscv64-unknown-elf-size --format=berkeley "test.elf"
   text	   data	    bss	    dec	    hex	filename
    472	      0	    136	    608	    260	test.elf

04:26:45 Build Finished. 0 errors, 0 warnings. (took 734ms)


Simulation Output : got output till 0A (Passed)(All test cases passed)


5. Flag --> O3

04:28:11 **** Build of configuration Default for project rwu-rv64i ****
make all 
Building APP='test' from SRC_C='./test.c'
[CC] test.c
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O3 -g -msmall-data-limit=0 -I. -c "test.c" -o "test.o"
[AS] crt0.s
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O3 -g -msmall-data-limit=0 -I. -c "crt0.s" -o "crt0.o"
[LD] test.elf
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -T linker.ld -Wl,-Map="test.map" -o "test.elf" test.o crt0.o
[CP] test.elf -> test.v
riscv64-unknown-elf-objcopy -O verilog --verilog-data-width 4 "test.elf" "test.v"
sed -i 's/ /\n/g' "test.v"
sed -i 's/\r//g'  "test.v"
sed -i '1d'       "test.v"
cp -f "test.v" "../sim/riscvtest.mem"
cp -f "test.v" "../sim/riscvtest_tb_test.mem"
[BIN] test.elf -> test.bin
riscv64-unknown-elf-objcopy -O binary "test.elf" "test.bin"
[DMP] test.elf -> test.lst
riscv64-unknown-elf-objdump -d -S "test.elf" > "test.lst"
[SZ] test.elf
riscv64-unknown-elf-size --format=berkeley "test.elf"
   text	   data	    bss	    dec	    hex	filename
    440	      0	     72	    512	    200	test.elf

04:28:12 Build Finished. 0 errors, 0 warnings. (took 734ms)


Simulation Output : got output till 0A (Passed)(All test cases passed)


6. Flag --> Os

04:31:12 **** Build of configuration Default for project rwu-rv64i ****
make all 
Building APP='test' from SRC_C='./test.c'
[CC] test.c
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -Os -g -msmall-data-limit=0 -I. -c "test.c" -o "test.o"
[AS] crt0.s
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -Os -g -msmall-data-limit=0 -I. -c "crt0.s" -o "crt0.o"
[LD] test.elf
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -T linker.ld -Wl,-Map="test.map" -o "test.elf" test.o crt0.o
[CP] test.elf -> test.v
riscv64-unknown-elf-objcopy -O verilog --verilog-data-width 4 "test.elf" "test.v"
sed -i 's/ /\n/g' "test.v"
sed -i 's/\r//g'  "test.v"
sed -i '1d'       "test.v"
cp -f "test.v" "../sim/riscvtest.mem"
cp -f "test.v" "../sim/riscvtest_tb_test.mem"
[BIN] test.elf -> test.bin
riscv64-unknown-elf-objcopy -O binary "test.elf" "test.bin"
[DMP] test.elf -> test.lst
riscv64-unknown-elf-objdump -d -S "test.elf" > "test.lst"
[SZ] test.elf
riscv64-unknown-elf-size --format=berkeley "test.elf"
   text	   data	    bss	    dec	    hex	filename
    480	      0	    136	    616	    268	test.elf

04:31:12 Build Finished. 0 errors, 0 warnings. (took 734ms)


Simulation Output : got output till 0A (Passed)(All test cases passed)

7. Flag --> Ofast

04:32:54 **** Build of configuration Default for project rwu-rv64i ****
make all 
Building APP='test' from SRC_C='./test.c'
[CC] test.c
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -Ofast -g -msmall-data-limit=0 -I. -c "test.c" -o "test.o"
[AS] crt0.s
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -Ofast -g -msmall-data-limit=0 -I. -c "crt0.s" -o "crt0.o"
[LD] test.elf
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -T linker.ld -Wl,-Map="test.map" -o "test.elf" test.o crt0.o
[CP] test.elf -> test.v
riscv64-unknown-elf-objcopy -O verilog --verilog-data-width 4 "test.elf" "test.v"
sed -i 's/ /\n/g' "test.v"
sed -i 's/\r//g'  "test.v"
sed -i '1d'       "test.v"
cp -f "test.v" "../sim/riscvtest.mem"
cp -f "test.v" "../sim/riscvtest_tb_test.mem"
[BIN] test.elf -> test.bin
riscv64-unknown-elf-objcopy -O binary "test.elf" "test.bin"
[DMP] test.elf -> test.lst
riscv64-unknown-elf-objdump -d -S "test.elf" > "test.lst"
[SZ] test.elf
riscv64-unknown-elf-size --format=berkeley "test.elf"
   text	   data	    bss	    dec	    hex	filename
    440	      0	     72	    512	    200	test.elf

04:32:55 Build Finished. 0 errors, 0 warnings. (took 734ms)

Simulation Output : got output till 0A (Passed)(All test cases passed)

-----------------------------------------------------------------------------------------------------------------------

#include "rwu-rv64i.h"

static int square(int x)
{
    return x * x;
}

int main(void)
{
    // Start marker
    rwu_print(0xA0);

    int sum = 0;
    int i;

    // Basic arithmetic and loop (compiler can unroll/optimize this)
    for (i = 1; i <= 5; i++) {
        int s = square(i);
        sum += s;
        rwu_print(0xA0 + i);   // 0xA1, 0xA2, 0xA3, 0xA4, 0xA5
    }

    // Conditional section (compiler may branch-optimize)
    if (sum > 50)
        rwu_print(0xB0);
    else
        rwu_print(0xB1);

    // Bitwise and arithmetic mix
    int val = (sum ^ 0x55) & 0xFF;
    rwu_print(val);  // Outputs lower 8 bits of computed value

    // End marker
    rwu_print(0xAF);
    while(1){
    	rwu_print(0xFF);
    }
    return 0;
}

The optimization test results of the above program shown as below

1. Flag --> O0

04:57:39 **** Build of configuration Default for project rwu-rv64i ****
make all 
Building APP='test' from SRC_C='./test.c'
[CC] test.c
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O0 -g -msmall-data-limit=0 -I. -c "test.c" -o "test.o"
[AS] crt0.s
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O0 -g -msmall-data-limit=0 -I. -c "crt0.s" -o "crt0.o"
[LD] test.elf
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -T linker.ld -Wl,-Map="test.map" -o "test.elf" test.o crt0.o
/usr/lib/gcc/riscv64-unknown-elf/13.2.0/../../../riscv64-unknown-elf/bin/ld: test.o: in function `square':
/home/abhishek-revoor/Desktop/Thesis/rwu-rv64i-master/c_complile/test.c:5:(.text+0x60): undefined reference to `__muldi3'
collect2: error: ld returned 1 exit status
make: *** [Makefile:89: test.elf] Error 1
"make all" terminated with exit code 2. Build might be incomplete.

04:57:39 Build Failed. 2 errors, 0 warnings. (took 684ms)


Simulation Output : Build failed.



2. Flag  --> O1 or O

05:00:05 **** Build of configuration Default for project rwu-rv64i ****
make all 
Building APP='test' from SRC_C='./test.c'
[CC] test.c
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O -g -msmall-data-limit=0 -I. -c "test.c" -o "test.o"
[AS] crt0.s
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O -g -msmall-data-limit=0 -I. -c "crt0.s" -o "crt0.o"
[LD] test.elf
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -T linker.ld -Wl,-Map="test.map" -o "test.elf" test.o crt0.o
[CP] test.elf -> test.v
riscv64-unknown-elf-objcopy -O verilog --verilog-data-width 4 "test.elf" "test.v"
sed -i 's/ /\n/g' "test.v"
sed -i 's/\r//g'  "test.v"
sed -i '1d'       "test.v"
cp -f "test.v" "../sim/riscvtest.mem"
cp -f "test.v" "../sim/riscvtest_tb_test.mem"
[BIN] test.elf -> test.bin
riscv64-unknown-elf-objcopy -O binary "test.elf" "test.bin"
[DMP] test.elf -> test.lst
riscv64-unknown-elf-objdump -d -S "test.elf" > "test.lst"
[SZ] test.elf
riscv64-unknown-elf-size --format=berkeley "test.elf"
   text	   data	    bss	    dec	    hex	filename
    140	      0	      0	    140	     8c	test.elf

05:00:06 Build Finished. 0 errors, 0 warnings. (took 684ms)

Simulation Output : All test cases passed(Success)

3. Flag  --> O2

05:02:04 **** Build of configuration Default for project rwu-rv64i ****
make all 
Building APP='test' from SRC_C='./test.c'
[CC] test.c
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O2 -g -msmall-data-limit=0 -I. -c "test.c" -o "test.o"
[AS] crt0.s
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O2 -g -msmall-data-limit=0 -I. -c "crt0.s" -o "crt0.o"
[LD] test.elf
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -T linker.ld -Wl,-Map="test.map" -o "test.elf" test.o crt0.o
[CP] test.elf -> test.v
riscv64-unknown-elf-objcopy -O verilog --verilog-data-width 4 "test.elf" "test.v"
sed -i 's/ /\n/g' "test.v"
sed -i 's/\r//g'  "test.v"
sed -i '1d'       "test.v"
cp -f "test.v" "../sim/riscvtest.mem"
cp -f "test.v" "../sim/riscvtest_tb_test.mem"
[BIN] test.elf -> test.bin
riscv64-unknown-elf-objcopy -O binary "test.elf" "test.bin"
[DMP] test.elf -> test.lst
riscv64-unknown-elf-objdump -d -S "test.elf" > "test.lst"
[SZ] test.elf
riscv64-unknown-elf-size --format=berkeley "test.elf"
   text	   data	    bss	    dec	    hex	filename
    140	      0	      0	    140	     8c	test.elf

05:02:05 Build Finished. 0 errors, 0 warnings. (took 683ms)

Simulation Output : All test cases passed(Success)


4. Flag --> O3

05:03:07 **** Incremental Build of configuration Default for project rwu-rv64i ****
make all 
Building APP='test' from SRC_C='./test.c'
[CC] test.c
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O3 -g -msmall-data-limit=0 -I. -c "test.c" -o "test.o"
[AS] crt0.s
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O3 -g -msmall-data-limit=0 -I. -c "crt0.s" -o "crt0.o"
[LD] test.elf
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -T linker.ld -Wl,-Map="test.map" -o "test.elf" test.o crt0.o
[CP] test.elf -> test.v
riscv64-unknown-elf-objcopy -O verilog --verilog-data-width 4 "test.elf" "test.v"
sed -i 's/ /\n/g' "test.v"
sed -i 's/\r//g'  "test.v"
sed -i '1d'       "test.v"
cp -f "test.v" "../sim/riscvtest.mem"
cp -f "test.v" "../sim/riscvtest_tb_test.mem"
[BIN] test.elf -> test.bin
riscv64-unknown-elf-objcopy -O binary "test.elf" "test.bin"
[DMP] test.elf -> test.lst
riscv64-unknown-elf-objdump -d -S "test.elf" > "test.lst"
[SZ] test.elf
riscv64-unknown-elf-size --format=berkeley "test.elf"
   text	   data	    bss	    dec	    hex	filename
    140	      0	      0	    140	     8c	test.elf


Simulation Output : All test cases passed(Success)


5. Flag --> Os

05:05:08 **** Build of configuration Default for project rwu-rv64i ****
make all 
Building APP='test' from SRC_C='./test.c'
[CC] test.c
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -Os -g -msmall-data-limit=0 -I. -c "test.c" -o "test.o"
[AS] crt0.s
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -Os -g -msmall-data-limit=0 -I. -c "crt0.s" -o "crt0.o"
[LD] test.elf
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -T linker.ld -Wl,-Map="test.map" -o "test.elf" test.o crt0.o
[CP] test.elf -> test.v
riscv64-unknown-elf-objcopy -O verilog --verilog-data-width 4 "test.elf" "test.v"
sed -i 's/ /\n/g' "test.v"
sed -i 's/\r//g'  "test.v"
sed -i '1d'       "test.v"
cp -f "test.v" "../sim/riscvtest.mem"
cp -f "test.v" "../sim/riscvtest_tb_test.mem"
[BIN] test.elf -> test.bin
riscv64-unknown-elf-objcopy -O binary "test.elf" "test.bin"
[DMP] test.elf -> test.lst
riscv64-unknown-elf-objdump -d -S "test.elf" > "test.lst"
[SZ] test.elf
riscv64-unknown-elf-size --format=berkeley "test.elf"
   text	   data	    bss	    dec	    hex	filename
    136	      0	      0	    136	     88	test.elf

Simulation Output : All test cases passed(Success)

6. Flag --> Ofast

05:05:53 **** Build of configuration Default for project rwu-rv64i ****
make all 
Building APP='test' from SRC_C='./test.c'
[CC] test.c
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -Ofast -g -msmall-data-limit=0 -I. -c "test.c" -o "test.o"
[AS] crt0.s
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -Ofast -g -msmall-data-limit=0 -I. -c "crt0.s" -o "crt0.o"
[LD] test.elf
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -T linker.ld -Wl,-Map="test.map" -o "test.elf" test.o crt0.o
[CP] test.elf -> test.v
riscv64-unknown-elf-objcopy -O verilog --verilog-data-width 4 "test.elf" "test.v"
sed -i 's/ /\n/g' "test.v"
sed -i 's/\r//g'  "test.v"
sed -i '1d'       "test.v"
cp -f "test.v" "../sim/riscvtest.mem"
cp -f "test.v" "../sim/riscvtest_tb_test.mem"
[BIN] test.elf -> test.bin
riscv64-unknown-elf-objcopy -O binary "test.elf" "test.bin"
[DMP] test.elf -> test.lst
riscv64-unknown-elf-objdump -d -S "test.elf" > "test.lst"
[SZ] test.elf
riscv64-unknown-elf-size --format=berkeley "test.elf"
   text	   data	    bss	    dec	    hex	filename
    140	      0	      0	    140	     8c	test.elf

05:05:53 Build Finished. 0 errors, 0 warnings. (took 684ms)

Simulation Output : All test cases passed(Success)


---------------------------------------------------------------------------------------------------------------------------


/* test_simple_gpio.c
 * Simple optimization test program for RWU-RV64I
 * - No delay, no multiply/divide
 * - Prints 6 predictable GPIO values
 *
 * Expected GPIO output (decimal):
 *   200, 150, 50, 25, 75, 255
 */

#include "rwu-rv64i.h"


static inline void gout(uint8_t v) { rwu_print(v); }

int main(void)
{
    uint8_t a = 100;
    uint8_t b = 50;
    uint8_t c;

    gout(200);   // Start marker (0xC8)

    c = a + b;   // 100 + 50 = 150
    gout(c);     // → 150

    c = a - b;   // 100 - 50 = 50
    gout(c);     // → 50

    c = b / 2;   // 50 / 2 = 25
    gout(c);     // → 25

    c = a ^ b;   // 100 XOR 50 = 86 (0x56)
    c = c - 11;  // 86 - 11 = 75
    gout(c);     // → 75


    while (1) {
    	gout(255);
    }  // stop execution

    return 0;
}

The optimization test results of the above program shown as below

1. Flag --> O0

06:05:23 **** Build of configuration Default for project rwu-rv64i ****
make all 
Building APP='test' from SRC_C='./test.c'
[CC] test.c
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O0 -g -msmall-data-limit=0 -I. -c "test.c" -o "test.o"
[AS] crt0.s
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O0 -g -msmall-data-limit=0 -I. -c "crt0.s" -o "crt0.o"
[LD] test.elf
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -T linker.ld -Wl,-Map="test.map" -o "test.elf" test.o crt0.o
[CP] test.elf -> test.v
riscv64-unknown-elf-objcopy -O verilog --verilog-data-width 4 "test.elf" "test.v"
sed -i 's/ /\n/g' "test.v"
sed -i 's/\r//g'  "test.v"
sed -i '1d'       "test.v"
cp -f "test.v" "../sim/riscvtest.mem"
cp -f "test.v" "../sim/riscvtest_tb_test.mem"
[BIN] test.elf -> test.bin
riscv64-unknown-elf-objcopy -O binary "test.elf" "test.bin"
[DMP] test.elf -> test.lst
riscv64-unknown-elf-objdump -d -S "test.elf" > "test.lst"
[SZ] test.elf
riscv64-unknown-elf-size --format=berkeley "test.elf"
   text	   data	    bss	    dec	    hex	filename
    336	      0	      8	    344	    158	test.elf

06:05:24 Build Finished. 0 errors, 0 warnings. (took 687ms)


Simulation Output : No test cases passed(Simulation Failed)



2. Flag  --> O1 or O

06:06:20 **** Build of configuration Default for project rwu-rv64i ****
make all 
Building APP='test' from SRC_C='./test.c'
[CC] test.c
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O1 -g -msmall-data-limit=0 -I. -c "test.c" -o "test.o"
[AS] crt0.s
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O1 -g -msmall-data-limit=0 -I. -c "crt0.s" -o "crt0.o"
[LD] test.elf
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -T linker.ld -Wl,-Map="test.map" -o "test.elf" test.o crt0.o
[CP] test.elf -> test.v
riscv64-unknown-elf-objcopy -O verilog --verilog-data-width 4 "test.elf" "test.v"
sed -i 's/ /\n/g' "test.v"
sed -i 's/\r//g'  "test.v"
sed -i '1d'       "test.v"
cp -f "test.v" "../sim/riscvtest.mem"
cp -f "test.v" "../sim/riscvtest_tb_test.mem"
[BIN] test.elf -> test.bin
riscv64-unknown-elf-objcopy -O binary "test.elf" "test.bin"
[DMP] test.elf -> test.lst
riscv64-unknown-elf-objdump -d -S "test.elf" > "test.lst"
[SZ] test.elf
riscv64-unknown-elf-size --format=berkeley "test.elf"
   text	   data	    bss	    dec	    hex	filename
    108	      0	      0	    108	     6c	test.elf

06:06:21 Build Finished. 0 errors, 0 warnings. (took 686ms)

Simulation Output : All test cases passed(Success)

3. Flag  --> O2

06:07:11 **** Build of configuration Default for project rwu-rv64i ****
make all 
Building APP='test' from SRC_C='./test.c'
[CC] test.c
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O2 -g -msmall-data-limit=0 -I. -c "test.c" -o "test.o"
[AS] crt0.s
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O2 -g -msmall-data-limit=0 -I. -c "crt0.s" -o "crt0.o"
[LD] test.elf
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -T linker.ld -Wl,-Map="test.map" -o "test.elf" test.o crt0.o
[CP] test.elf -> test.v
riscv64-unknown-elf-objcopy -O verilog --verilog-data-width 4 "test.elf" "test.v"
sed -i 's/ /\n/g' "test.v"
sed -i 's/\r//g'  "test.v"
sed -i '1d'       "test.v"
cp -f "test.v" "../sim/riscvtest.mem"
cp -f "test.v" "../sim/riscvtest_tb_test.mem"
[BIN] test.elf -> test.bin
riscv64-unknown-elf-objcopy -O binary "test.elf" "test.bin"
[DMP] test.elf -> test.lst
riscv64-unknown-elf-objdump -d -S "test.elf" > "test.lst"
[SZ] test.elf
riscv64-unknown-elf-size --format=berkeley "test.elf"
   text	   data	    bss	    dec	    hex	filename
    108	      0	      0	    108	     6c	test.elf

06:07:12 Build Finished. 0 errors, 0 warnings. (took 684ms)

Simulation Output : All test cases passed(Success)


4. Flag --> O3

06:07:53 **** Build of configuration Default for project rwu-rv64i ****
make all 
Building APP='test' from SRC_C='./test.c'
[CC] test.c
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O3 -g -msmall-data-limit=0 -I. -c "test.c" -o "test.o"
[AS] crt0.s
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -O3 -g -msmall-data-limit=0 -I. -c "crt0.s" -o "crt0.o"
[LD] test.elf
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -T linker.ld -Wl,-Map="test.map" -o "test.elf" test.o crt0.o
[CP] test.elf -> test.v
riscv64-unknown-elf-objcopy -O verilog --verilog-data-width 4 "test.elf" "test.v"
sed -i 's/ /\n/g' "test.v"
sed -i 's/\r//g'  "test.v"
sed -i '1d'       "test.v"
cp -f "test.v" "../sim/riscvtest.mem"
cp -f "test.v" "../sim/riscvtest_tb_test.mem"
[BIN] test.elf -> test.bin
riscv64-unknown-elf-objcopy -O binary "test.elf" "test.bin"
[DMP] test.elf -> test.lst
riscv64-unknown-elf-objdump -d -S "test.elf" > "test.lst"
[SZ] test.elf
riscv64-unknown-elf-size --format=berkeley "test.elf"
   text	   data	    bss	    dec	    hex	filename
    108	      0	      0	    108	     6c	test.elf

06:07:54 Build Finished. 0 errors, 0 warnings. (took 684ms)

Simulation Output : All test cases passed(Success)


5. Flag --> Os

06:08:38 **** Build of configuration Default for project rwu-rv64i ****
make all 
Building APP='test' from SRC_C='./test.c'
[CC] test.c
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -Os -g -msmall-data-limit=0 -I. -c "test.c" -o "test.o"
[AS] crt0.s
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -Os -g -msmall-data-limit=0 -I. -c "crt0.s" -o "crt0.o"
[LD] test.elf
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -T linker.ld -Wl,-Map="test.map" -o "test.elf" test.o crt0.o
[CP] test.elf -> test.v
riscv64-unknown-elf-objcopy -O verilog --verilog-data-width 4 "test.elf" "test.v"
sed -i 's/ /\n/g' "test.v"
sed -i 's/\r//g'  "test.v"
sed -i '1d'       "test.v"
cp -f "test.v" "../sim/riscvtest.mem"
cp -f "test.v" "../sim/riscvtest_tb_test.mem"
[BIN] test.elf -> test.bin
riscv64-unknown-elf-objcopy -O binary "test.elf" "test.bin"
[DMP] test.elf -> test.lst
riscv64-unknown-elf-objdump -d -S "test.elf" > "test.lst"
[SZ] test.elf
riscv64-unknown-elf-size --format=berkeley "test.elf"
   text	   data	    bss	    dec	    hex	filename
    104	      0	      0	    104	     68	test.elf

06:08:39 Build Finished. 0 errors, 0 warnings. (took 684ms)

Simulation Output : All test cases passed(Success)

6. Flag --> Ofast

06:09:19 **** Build of configuration Default for project rwu-rv64i ****
make all 
Building APP='test' from SRC_C='./test.c'
[CC] test.c
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -Ofast -g -msmall-data-limit=0 -I. -c "test.c" -o "test.o"
[AS] crt0.s
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -Ofast -g -msmall-data-limit=0 -I. -c "crt0.s" -o "crt0.o"
[LD] test.elf
riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -ffreestanding -nostdlib -T linker.ld -Wl,-Map="test.map" -o "test.elf" test.o crt0.o
[CP] test.elf -> test.v
riscv64-unknown-elf-objcopy -O verilog --verilog-data-width 4 "test.elf" "test.v"
sed -i 's/ /\n/g' "test.v"
sed -i 's/\r//g'  "test.v"
sed -i '1d'       "test.v"
cp -f "test.v" "../sim/riscvtest.mem"
cp -f "test.v" "../sim/riscvtest_tb_test.mem"
[BIN] test.elf -> test.bin
riscv64-unknown-elf-objcopy -O binary "test.elf" "test.bin"
[DMP] test.elf -> test.lst
riscv64-unknown-elf-objdump -d -S "test.elf" > "test.lst"
[SZ] test.elf
riscv64-unknown-elf-size --format=berkeley "test.elf"
   text	   data	    bss	    dec	    hex	filename
    108	      0	      0	    108	     6c	test.elf

06:09:20 Build Finished. 0 errors, 0 warnings. (took 684ms)

Simulation Output : All test cases passed(Success)


---------------------------------------------------------------------------------------------------------------------------

The .mem file produced by each c program at O2 optimization is added to the FPGA and got the susscessfull result.
